//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use alohomora::bbox::BBox;
use portfolio_policies::FakePolicy;
use portfolio_policies::data::CandidateDataPolicy;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "candidate")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: BBox<i32, CandidateDataPolicy>,
    pub name: Option<BBox<String, CandidateDataPolicy>>,
    pub surname: Option<BBox<String, CandidateDataPolicy>>,
    pub birth_surname: Option<BBox<String, CandidateDataPolicy>>,
    pub birthplace: Option<BBox<String, CandidateDataPolicy>>,
    pub birthdate: Option<BBox<String, CandidateDataPolicy>>,
    pub address: Option<BBox<String, CandidateDataPolicy>>,
    pub letter_address: Option<BBox<String, CandidateDataPolicy>>,
    pub telephone: Option<BBox<String, CandidateDataPolicy>>,
    pub citizenship: Option<BBox<String, CandidateDataPolicy>>,
    pub email: Option<BBox<String, CandidateDataPolicy>>,
    pub sex: Option<BBox<String, CandidateDataPolicy>>,
    pub personal_identification_number: BBox<String, CandidateDataPolicy>,
    pub school_name: Option<BBox<String, CandidateDataPolicy>>,
    pub health_insurance: Option<BBox<String, CandidateDataPolicy>>,
    pub grades_json: Option<BBox<String, CandidateDataPolicy>>,
    pub first_school: Option<BBox<String, CandidateDataPolicy>>,
    pub second_school: Option<BBox<String, CandidateDataPolicy>>,
    pub test_language: Option<BBox<String, CandidateDataPolicy>>,
    pub encrypted_by_id: Option<BBox<i32, CandidateDataPolicy>>, // TODO: ill see what policy this should be
    pub created_at: BBox<DateTime, FakePolicy>,
    pub updated_at: BBox<DateTime, FakePolicy>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::application::Entity")]
    Application,
    #[sea_orm(has_many = "super::parent::Entity")]
    Parent,
}

impl Related<super::application::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Application.def()
    }
}

impl Related<super::parent::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Parent.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
