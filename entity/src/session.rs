//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use alohomora::policy::NoPolicy;
use sea_orm::entity::prelude::*;
use alohomora::bbox::BBox;

use crate::session_trait::UserSession;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "session")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: BBox<Uuid, NoPolicy>,
    pub candidate_id: BBox<i32, NoPolicy>,
    pub ip_address: BBox<String, NoPolicy>,
    pub created_at: BBox<DateTime, NoPolicy>,
    pub expires_at: BBox<DateTime, NoPolicy>,
    pub updated_at: BBox<DateTime, NoPolicy>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::application::Entity",
        from = "Column::CandidateId",
        to = "super::application::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Application,
}

impl Related<super::application::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Application.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[async_trait::async_trait]
impl UserSession for Model {
    async fn id(&self) -> BBox<Uuid, NoPolicy> {
        self.id.clone()
    }
    async fn expires_at(&self) -> BBox<chrono::NaiveDateTime, NoPolicy> {
        self.expires_at.clone()
    }
}